-- AI Travel Planner Database Schema for Supabase PostgreSQL
-- Run this script in Supabase SQL Editor to create tables

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- User Sessions Table
-- Stores conversation state and history
CREATE TABLE IF NOT EXISTS user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    thread_id VARCHAR(255) UNIQUE NOT NULL,
    state JSONB NOT NULL DEFAULT '{}',
    messages JSONB NOT NULL DEFAULT '[]',
    current_itinerary JSONB,
    tool_results JSONB DEFAULT '{}',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_active TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Indexes for performance
    CONSTRAINT thread_id_unique UNIQUE (thread_id)
);

CREATE INDEX IF NOT EXISTS idx_user_sessions_thread_id ON user_sessions(thread_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_last_active ON user_sessions(last_active DESC);

-- Itineraries Table
-- Stores generated travel itineraries
CREATE TABLE IF NOT EXISTS itineraries (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    thread_id VARCHAR(255) REFERENCES user_sessions(thread_id) ON DELETE CASCADE,
    destination VARCHAR(255) NOT NULL,
    start_date DATE,
    end_date DATE,
    duration_days INTEGER,
    days JSONB NOT NULL DEFAULT '[]',
    total_estimated_cost NUMERIC(10, 2),
    summary TEXT,
    metadata JSONB DEFAULT '{}',
    status VARCHAR(50) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_itineraries_thread_id ON itineraries(thread_id);
CREATE INDEX IF NOT EXISTS idx_itineraries_destination ON itineraries(destination);
CREATE INDEX IF NOT EXISTS idx_itineraries_created_at ON itineraries(created_at DESC);

-- Tool Cache Table
-- Caches API results (flights, hotels, activities) to reduce API calls
CREATE TABLE IF NOT EXISTS tool_cache (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    tool_name VARCHAR(100) NOT NULL,
    params_hash VARCHAR(255) NOT NULL,
    result JSONB NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Composite unique constraint
    CONSTRAINT tool_cache_unique UNIQUE (tool_name, params_hash)
);

CREATE INDEX IF NOT EXISTS idx_tool_cache_lookup ON tool_cache(tool_name, params_hash);
CREATE INDEX IF NOT EXISTS idx_tool_cache_expires_at ON tool_cache(expires_at);

-- Plans Table
-- Stores execution plans generated by the planner
CREATE TABLE IF NOT EXISTS plans (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    thread_id VARCHAR(255) REFERENCES user_sessions(thread_id) ON DELETE CASCADE,
    steps JSONB NOT NULL DEFAULT '[]',
    executed_steps INTEGER DEFAULT 0,
    total_steps INTEGER DEFAULT 0,
    status VARCHAR(50) DEFAULT 'pending',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE
);

CREATE INDEX IF NOT EXISTS idx_plans_thread_id ON plans(thread_id);
CREATE INDEX IF NOT EXISTS idx_plans_status ON plans(status);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for itineraries table
CREATE TRIGGER update_itineraries_updated_at
    BEFORE UPDATE ON itineraries
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Function to clean expired cache entries
CREATE OR REPLACE FUNCTION clean_expired_cache()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM tool_cache WHERE expires_at < NOW();
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Comments for documentation
COMMENT ON TABLE user_sessions IS 'Stores user conversation sessions and state';
COMMENT ON TABLE itineraries IS 'Stores generated travel itineraries';
COMMENT ON TABLE tool_cache IS 'Caches API results to reduce external API calls';
COMMENT ON TABLE plans IS 'Stores execution plans generated by the planner agent';

-- Grant permissions (if needed for service role)
-- ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE itineraries ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE tool_cache ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE plans ENABLE ROW LEVEL SECURITY;

-- Sample query to clean cache (run periodically via cron or trigger)
-- SELECT clean_expired_cache();
